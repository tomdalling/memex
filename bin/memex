#!/bin/bash

# TODO: this should not need to be bash anymore. convert it to ruby

set -ueo pipefail
IFS=$'\n\t'

BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PROJECT_ROOT="$(dirname "$BIN_DIR")"
PROG_NAME=$(basename $0)
CHRUBY_SCRIPT="/usr/local/share/chruby/chruby.sh"

read_config() {
  cd "$PROJECT_ROOT"
  ruby -ryaml -e "print YAML.safe_load(File.read('config.yml')).dig(*ARGV)" "$@"
}

expand_tilde() {
  echo -n "${1/#\~/$HOME}"
}

BUNDLE_PATH="$(expand_tilde "$(read_config memex image_path)")"
VOLUME_PATH="$(read_config memex volume_path)"

NOCOLOR='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHTGRAY='\033[0;37m'
DARKGRAY='\033[1;30m'
LIGHTRED='\033[1;31m'
LIGHTGREEN='\033[1;32m'
YELLOW='\033[1;33m'
LIGHTBLUE='\033[1;34m'
LIGHTPURPLE='\033[1;35m'
LIGHTCYAN='\033[1;36m'
WHITE='\033[1;37m'

C_CODE="${BLUE}"
C_PATH="${LIGHTGRAY}"

echoc() {
  echo -e $@ "${NOCOLOR}"
}

linetype() {
  char=${1-?}
  echo -e -n "${ORANGE}${char}${char}${char}${char}${NOCOLOR}"
}

sub_help(){
  # Use this script for accessing binaries inside the memex
    echoc "${C_CODE}Usage: $PROG_NAME <subcommand> [options]"
    echo  ""
    echo  "Consider adding these aliases to your bashrc:"
    echo  ""
    echo  "    alias memex='~/path/to/bin/memex'"
    echo  "    alias journal='memex run journal'"
    echo  "    alias zettel='memex run zettel'"
    echo  ""
    echo  "Subcommands:"
    echoc "    ${C_CODE}mount"
    echo  "        Mounts the memex volume."
    echoc "    ${C_CODE}eject"
    echo  "        Unmounts the memex volume, after commiting the data directory"
    echo  "        using 'bin/version_control commit'."
    echoc "    ${C_CODE}run <script> <args...>"
    echo  "        Mounts the memex volume, runs a script inside, and ejects the"
    echo  "        volume after the script is finished. Does not eject if the"
    echo  "        volume was already mounted."
    echo  ""
}

pretty_run() {
  silent="false"
  if [[ ${1-} == "--silent" ]] ; then
    silent="true"
    shift
  fi

  prefix=${1-Run}
  shift

  if [[ "$silent" == true ]] ; then
    # single line output
    echoc -n "$(linetype "=") ${prefix}: ${C_CODE}$@${NOCOLOR} ... "
    eval "$@" > /dev/null
    if [[ $? == 0 ]] ; then
      echoc "${GREEN}ok"
    else
      echoc "${RED}FAILED"
    exit 1
    fi
  else
    # multi-line output
    echoc "$(linetype ">") ${prefix}: ${C_CODE}$@${NOCOLOR}"
    if eval "$@" ; then
      echoc "$(linetype "<") ${GREEN}ok"
    else
      echoc "$(linetype "<") ${RED}FAILED"
      exit 1
    fi
  fi
}

run_bin(){
  cd "$PROJECT_ROOT"
  boot_ruby

  script=${1-none}
  shift
  pretty_run Run "bin/${script}" "$@"
}

boot_ruby(){
  # if chruby exists and it's not already loaded
  if [[ -r "$CHRUBY_SCRIPT" ]] && [[ -z "${CHRUBY_VERSION-}" ]] ; then
    ruby_version="$(cat .ruby-version)"

    # these scripts don't work in -u mode
    set +u
    source "$CHRUBY_SCRIPT"
    chruby "$ruby_version"
    set -u
  fi
}

sub_mount(){
  if [ ! -d "$VOLUME_PATH" ] ; then
    pretty_run Mount hdiutil attach "$BUNDLE_PATH"
  else
    echoc "$(linetype "?") Memex already mounted at ${C_PATH}${VOLUME_PATH}"
  fi
}

sub_eject(){
  run_bin version_control commit
  pretty_run --silent Eject hdiutil detach "$(hdiutil info | grep "${VOLUME_PATH}" | cut -d$'\t' -f 1)"
}

sub_run(){
  should_mount="true"
  if [[ ${1-} == "--no-mount" ]] ; then
    should_mount="false"
    shift
  fi

  if [ "$should_mount" == "true" ] && [ ! -d "$VOLUME_PATH" ] ; then
    did_mount="true"
    sub_mount
  fi

  run_bin $@

  if [ "${did_mount-}" == true ] ; then
    sub_eject
  fi
}

subcommand=${1-}
case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${subcommand} $@
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$PROG_NAME --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac

